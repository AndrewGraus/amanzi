diff -rupN trilinos-11.6.1-source/packages/teuchos/parameterlist/src/Teuchos_XMLParameterListReader.cpp trilinos-11.6.1-source-patch/packages/teuchos/parameterlist/src/Teuchos_XMLParameterListReader.cpp
--- trilinos-11.6.1-source/packages/teuchos/parameterlist/src/Teuchos_XMLParameterListReader.cpp	2014-01-29 16:04:37.000000000 -0700
+++ trilinos-11.6.1-source-patch/packages/teuchos/parameterlist/src/Teuchos_XMLParameterListReader.cpp	2014-05-01 15:12:22.096478851 -0600
@@ -219,9 +219,9 @@ XMLParameterListReader::convertParameter
           TEUCHOS_TEST_FOR_EXCEPTION( 
             _allowDuplicateSublists == false
             &&
-            parentList->isSublist(name) == true,
+            (parentList->isSublist(name) == true || parentList->isParameter(name) == true), 
             DuplicateParameterSublist,
-            "XMLParameterListReader encountered duplicate sublist \"" << name << "\", in violation"
+            "XMLParameterListReader encountered duplicate sublist or parameter \"" << name << "\", in violation"
             << " of the policy specified by XMLParameterListReader::setAllowsDuplicateSublists()." );
           RCP<ParameterList> newList = sublist(parentList, name);
           convertParameterList(child, newList, entryIDsMap, validatorIDsMap);
@@ -233,8 +233,14 @@ XMLParameterListReader::convertParameter
               "All child nodes of a ParameterList must have a name attribute!" <<
               std::endl << std::endl);
           name = child.getRequired(XMLParameterListWriter::getNameAttributeName());
-          parentList->setEntry(
-            name, ParameterEntryXMLConverterDB::convertXML(child));
+          TEUCHOS_TEST_FOR_EXCEPTION( 
+            _allowDuplicateSublists == false
+            &&
+            (parentList->isSublist(name) == true || parentList->isParameter(name) == true), 
+            DuplicateParameterSublist,
+            "XMLParameterListReader encountered duplicate sublist or parameter \"" << name << "\", in violation"
+            << " of the policy specified by XMLParameterListReader::setAllowsDuplicateSublists()." );
+          parentList->setEntry(name, ParameterEntryXMLConverterDB::convertXML(child));
           if(child.hasAttribute(ValidatorXMLConverter::getIdAttributeName())){
             IDtoValidatorMap::const_iterator result = validatorIDsMap.find(
               child.getRequired<ParameterEntryValidator::ValidatorID>(