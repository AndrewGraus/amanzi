#  -*- mode: cmake -*-

#
# Build TPL:  EcoSIM
# This builds the BGC code EcoSIM for use within ATS
#
# --- Define all the directories and common external project flags
define_external_project_args(ECOSIM
                             TARGET ecosim
                             DEPENDS HDF5 ZLIB NetCDF NetCDF_Fortran
                             BUILD_IN_SOURCE)

# add version to the autogenerated tpl_versions.h file
amanzi_tpl_version_write(FILENAME ${TPL_VERSIONS_INCLUDE_FILE}
  PREFIX ECOSIM
  VERSION ${ECOSIM_VERSION_MAJOR} ${ECOSIM_VERSION_MINOR} ${ECOSIM_VERSION_PATCH})

message(STATUS "In BuildEcoSIM: ")

set(ECOSIM_CMAKE_CACHE_ARGS
      "-DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}"
      "-DCMAKE_INSTALL_PREFIX:PATH=${TPL_INSTALL_PREFIX}"
      "-DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}"
      "-DCMAKE_Fortran_FLAGS:STRING=-fPIC -w -Wno-unused-variable -O3")

# --- If downloads are disabled point to local repository
if ( DISABLE_EXTERNAL_DOWNLOAD )
  STRING(REGEX REPLACE "/src/master" "" GIT_REPOSITORY_TEMP ${ECOSIM_GIT_REPOSITORY})
  STRING(REGEX REPLACE ".*\/" "" ECOSIM_GIT_REPOSITORY_LOCAL_DIR ${GIT_REPOSITORY_TEMP})
  set (ECOSIM_GIT_REPOSITORY_TEMP ${TPL_DOWNLOAD_DIR}/${ECOSIM_GIT_REPOSITORY_LOCAL_DIR})
else()
  set (ECOSIM_GIT_REPOSITORY_TEMP ${ECOSIM_GIT_REPOSITORY})
endif()
message(STATUS "ECOSIM git repository = ${ECOSIM_GIT_REPOSITORY_TEMP}")

#set(ECOSIM_cmake_config ${ECOSIM_prefix_dir}/ecosim-config-step.cmake)
#configure_file(${SuperBuild_TEMPLATE_FILES_DIR}/ecosim-config-step.cmake.in
#               ${ECOSIM_cmake_config}
#               @ONLY)

set(ECOSIM_config_command ${CMAKE_COMMAND} ${ECOSIM_source_dir})
set(ECOSIM_build_dir ${ECOSIM_prefix_dir}/build)

message(STATUS "Attempting ecosim build...")
message(STATUS "ECOSIM_prefix_dir: ${ECOSIM_prefix_dir}")
message(STATUS "ECOSIM_source_dir: ${ECOSIM_source_dir}")

# --- Add external project build and tie to the ECOSIM build target
ExternalProject_Add(${ECOSIM_BUILD_TARGET}
                    DEPENDS   ${ECOSIM_PACKAGE_DEPENDS}        # Package dependency target
                    TMP_DIR   ${ECOSIM_tmp_dir}                # Temporary files directory
                    STAMP_DIR ${ECOSIM_stamp_dir}              # Timestamp and log directory
                    # -- Download and URL definitions
                    # -- Note: The repo is cloned into the ${ECOSIM_source_dir} directory
                    GIT_REPOSITORY ${ECOSIM_GIT_REPOSITORY_TEMP}
                    GIT_TAG        ${ECOSIM_GIT_TAG}
                    # -- Update (one way to skip this step is use null command)
                    UPDATE_COMMAND ""
                    # -- Patch
                    PATCH_COMMAND ""
                    # -- Configure
                    SOURCE_DIR    ${ECOSIM_source_dir}         # Source directory
		    CONFIGURE_COMMAND ${ECOSIM_config_command} 
                    CMAKE_ARGS    ${AMANZI_CMAKE_CACHE_ARGS}     # Ensure uniform build
                                  ${ECOSIM_CMAKE_CACHE_ARGS}
                                  -DCMAKE_C_FLAGS:STRING=${Amanzi_COMMON_CFLAGS}  # Ensure uniform build
                                  -DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}
                                  -DCMAKE_CXX_FLAGS:STRING=${Amanzi_COMMON_CXXFLAGS}  # Ensure uniform build
                                  -DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}
                                  -DCMAKE_Fortran_FLAGS:STRING=${Amanzi_COMMON_FCFLAGS}
                                  -DCMAKE_Fortran_COMPILER:FILEPATH=${CMAKE_Fortran_COMPILER}
                    BINARY_DIR     ${ECOSIM_build_dir}       # Build directory
		    BUILD_COMMAND    $(MAKE)   # $(MAKE) enables parallel builds through make
                    BUILD_IN_SOURCE  0                           # Flag for in source builds
#                    # -- Install
                    INSTALL_DIR      ${TPL_INSTALL_PREFIX}       # Install directory
		    INSTALL_COMMAND  $(MAKE) install
#                    # -- Output control
                    ${ECOSIM_logging_args})

message(STATUS "build finished, making libraries")

include(BuildLibraryName)
build_library_name(ecosim ECOSIM_LIBRARIES APPEND_PATH ${TPL_INSTALL_PREFIX}/lib/)
set(ECOSIM_INCLUDE_DIRS ${TPL_INSTALL_PREFIX}/ecosim/local/include)
set(ECOSIM_DIR ${TPL_INSTALL_PREFIX}/ecosim)
set(ECOSIM_INSTALL_PREFIX ${TPL_INSTALL_PREFIX})

message("Ecosim include dirs: ${ECOSIM_INCLUDE_DIRS}")
message("Ecosim lib: ${ECOSIM_LIBRARIES}")
message("Ecosim dir: ${ECOSIM_DIR}")
message("EcoSIM install prefix ${ECOSIM_INSTALL_PREFIX}")
